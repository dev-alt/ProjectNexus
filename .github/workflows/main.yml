name: Deploy to Ubuntu Server

on:
  push:
    branches:
      - main  # Trigger deployment on push to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          load: true
          tags: projectnexus-frontend:latest

      - name: Build backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          load: true
          tags: projectnexus-backend:latest

      - name: Save frontend image as tar archive
        run: docker save -o frontend.tar projectnexus-frontend:latest

      - name: Save backend image as tar archive
        run: docker save -o backend.tar projectnexus-backend:latest

      - name: Install SSH key with passphrase
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
          passphrase: ${{ secrets.DEPLOY_SSH_PASSPHRASE }}  # Add the passphrase here

      - name: Deploy to server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          # Transfer Docker images to the server
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no frontend.tar $DEPLOY_USER@$DEPLOY_HOST:~/frontend.tar
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no backend.tar $DEPLOY_USER@$DEPLOY_HOST:~/backend.tar

          # SSH into the server and deploy
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          # Load Docker images
          docker load -i ~/frontend.tar
          docker load -i ~/backend.tar

          # Stop and remove existing containers
          docker-compose down

          # Start the services
          docker-compose up -d

          # Clean up unused images and tar files
          docker image prune -f
          rm ~/frontend.tar ~/backend.tar
          EOF