name: Deploy to Ubuntu Server

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          load: true
          tags: projectnexus-frontend:latest

      - name: Build backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          load: true
          tags: projectnexus-backend:latest
          no-cache: true

      - name: Save frontend image as tar archive
        run: docker save -o frontend.tar projectnexus-frontend:latest

      - name: Save backend image as tar archive
        run: docker save -o backend.tar projectnexus-backend:latest

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          # Create .env file
          cat << EOT > .env
          MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
          JWT_SECRET=${JWT_SECRET}
          NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
          EOT
          
          # Create mongo-init.js file
          cat << EOT > mongo-init.js
          db = db.getSiblingDB('admin');

          // Create root user (if not exists)
          db.createUser({
              user: "root",
              pwd: process.env.MONGO_INITDB_ROOT_PASSWORD,
              roles: [ { role: "root", db: "admin" } ]
          });

          db = db.getSiblingDB('projectnexus');

          // Create application database and user
          db.createUser({
              user: "projectnexus",
              pwd: process.env.MONGO_INITDB_ROOT_PASSWORD,
              roles: [{ role: "readWrite", db: "projectnexus" }]
          });

          // Create indexes for better performance
          db.users.createIndex({ "email": 1 }, { unique: true });
          db.projects.createIndex({ "created_by": 1 });
          db.documents.createIndex({ "project_id": 1 });
          EOT
          
          # Transfer files individually
          echo "Transferring frontend.tar..."
          scp -o StrictHostKeyChecking=no frontend.tar $DEPLOY_USER@$DEPLOY_HOST:~/frontend.tar
          
          echo "Transferring backend.tar..."
          scp -o StrictHostKeyChecking=no backend.tar $DEPLOY_USER@$DEPLOY_HOST:~/backend.tar
          
          echo "Transferring docker-compose.yml..."
          scp -o StrictHostKeyChecking=no docker-compose.yml $DEPLOY_USER@$DEPLOY_HOST:~/docker-compose.yml
          
          echo "Transferring .env..."
          scp -o StrictHostKeyChecking=no .env $DEPLOY_USER@$DEPLOY_HOST:~/.env
          
          echo "Transferring mongo-init.js..."
          scp -o StrictHostKeyChecking=no mongo-init.js $DEPLOY_USER@$DEPLOY_HOST:~/mongo-init.js
          
          # Deploy
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            # Load images
            docker load -i ~/frontend.tar
            docker load -i ~/backend.tar
          
            # Stop existing containers
            docker-compose down --volumes --remove-orphans
          
            # Start services
            docker-compose up -d
          
            # Clean up
            docker image prune -f
            rm ~/frontend.tar ~/backend.tar
          EOF