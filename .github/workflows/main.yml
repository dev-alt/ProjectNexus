name: ProjectNexus CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1}).ok' --quiet"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Wait for MongoDB
        run: |
          echo "Waiting for MongoDB to start..."
          sleep 30

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
      
      # Build backend
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build Backend
        working-directory: ./backend
        run: |
          go mod download
          CGO_ENABLED=0 GOOS=linux go build -o projectnexus-api ./cmd/api
      
      # Build frontend
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build
      
      # Upload artifacts with explicit paths
      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/projectnexus-api
          retention-days: 1

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/projectnexus-api

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Deploy to Ubuntu Server
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          # Create directories first
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p ~/projectnexus/{backend,frontend/.next}"
          
          # Copy artifacts
          scp -o StrictHostKeyChecking=no backend/projectnexus-api ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/projectnexus/backend/
          scp -o StrictHostKeyChecking=no -r frontend/.next/* ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/projectnexus/frontend/.next/
          
          # Set permissions and update services
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            chmod +x ~/projectnexus/backend/projectnexus-api
            cd ~/projectnexus/frontend
            npm ci --production
          
            # Update environment variables
            echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" > .env
          
            # Restart services using Docker Compose
            cd ~/projectnexus
            docker compose down
            docker compose build --no-cache
            docker compose up -d
          EOF